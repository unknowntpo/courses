require "rails_helper"
require "json"

RSpec.describe Course, type: :model do
  describe "validation" do
    it "name should be present" do
      course = Course.new()
      puts "course: #{course.inspect}"
      expect(course).not_to be_valid
      expect(course.errors[:name]).to include("can't be blank")
      expect(course.errors[:lecturer]).to include("can't be blank")
      expect(course.errors[:description]).to include("can't be blank")
    end
  end
  describe "create" do
    # What's the
    let!(:course) { FactoryBot.create(:course, :with_chapters_and_units) }

    it "should create course and chapter at the same time" do
      expect(course).to be_valid
      puts "all coures #{Course.all.to_json}"
      puts "all chapters #{Chapter.all.to_json}"
      puts "all units #{Unit.all.to_json}"

      expect(Course.count).to eq(1)
      expect(Chapter.count).to eq(2)
      expect(Unit.count).to eq(4)
    end

    it "dup" do
      puts "all courses #{Course.all.to_json}"
      puts "all chapters #{Chapter.all.to_json}"
      puts "all units #{Unit.all.to_json}"

      expect(Course.count).to eq(1)
      expect(Chapter.count).to eq(2)
      expect(Unit.count).to eq(4)
    end
  end

  describe "re-order chapters in course" do
    let!(:course) { FactoryBot.create(:course, :with_chapters_and_units) }
    let!(:input) do
      input = course.dup
      input.chapters.reverse
      input.chapters.each_with_index.map { |ch, i| ch.update(:position => i) }
      input
    end

    context "succeed" do
      it "should update position course and chapter at the same time" do
        # TODO: figure out how this works
        # https://chat.openai.com/share/b3bf1d20-f989-4e6d-b566-89b97a9247f2
        puts "course :#{Course.includes(:chapters).map { |course| course.chapters }.to_json}"

        courses_data = Course.includes(:chapters).map { |course| course.chapters }

        puts "updated course #{courses_data.to_json}"

        # puts "all courses #{courses.to_json}"

        # generated by FactoryBot
        expect(Course.count).to eq(1)
        expect(Chapter.count).to eq(course.chapters.length)
        # todo: use reduce to gather total count
        expect(Unit.count).to eq(4)

        expect(course.chapters.length).to(e)

        # FIXME: The position is not updated
      end
    end

    context "failed" do
      describe "when some chapters is missing in input" do
        it "should report error" do
          :pending
        end
      end
    end
  end
end
