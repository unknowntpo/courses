# SQLite. Versions 3.8.0 and up are supported.
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem "sqlite3"
#
#
#
default: &default
  adapter: postgresql
  encoding: unicode
  username: <%= ENV.fetch("POSTGRES_USER") { "courses_manager"} %>
  password : <%= ENV.fetch("POSTGRES_PASSWORD") { "courses_manager"} %>
  host : <%= ENV.fetch("POSTGRES_HOST") {"localhost"} %>
  port : <%= ENV.fetch("POSTGRES_PORT") { 5432 } %>

  # The specified database role being used to connect to postgres.
  # To create additional roles in postgres see `$ createuser --help`.
  # When left blank, postgres will use the default role. This is
  # the same name as the operating system user running Rails.
  #  username: courses_manager

  # The password associated with the postgres role (username).
  # password: courses_manager

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  # host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  # port: 5432


  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  # pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

development:
  <<: *default
  database : <%= ENV.fetch("POSTGRES_DATABASE") { "courses_manager_pg_development" } %>

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database : <%= ENV.fetch("POSTGRES_DATABASE") { "courses_manager_pg_test" } %>

production:
  <<: *default
  database : <%= ENV.fetch("POSTGRES_DATABASE") { "courses_manager_pg_production" } %>
